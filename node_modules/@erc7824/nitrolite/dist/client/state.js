"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports._prepareAndSignInitialState = _prepareAndSignInitialState;
exports._prepareAndSignChallengeState = _prepareAndSignChallengeState;
exports._prepareAndSignResizeState = _prepareAndSignResizeState;
exports._prepareAndSignFinalState = _prepareAndSignFinalState;
const viem_1 = require("viem");
const Errors = __importStar(require("../errors"));
const utils_1 = require("../utils");
const types_1 = require("./types");
async function _prepareAndSignInitialState(tokenAddress, deps, params) {
    const { initialAllocationAmounts, stateData } = params;
    if (!stateData) {
        throw new Errors.MissingParameterError('State data is required for creating the channel');
    }
    const channelNonce = (0, utils_1.generateChannelNonce)(deps.account.address);
    const participants = [deps.account.address, deps.addresses.guestAddress];
    const channelParticipants = [deps.stateWalletClient.account.address, deps.addresses.guestAddress];
    const adjudicatorAddress = deps.addresses.adjudicator;
    if (!adjudicatorAddress) {
        throw new Errors.MissingParameterError('Default adjudicator address is not configured in addresses.adjudicator');
    }
    const challengeDuration = deps.challengeDuration;
    if (!participants || participants.length !== 2) {
        throw new Errors.InvalidParameterError('Channel must have two participants.');
    }
    if (!initialAllocationAmounts || initialAllocationAmounts.length !== 2) {
        throw new Errors.InvalidParameterError('Initial allocation amounts must be provided for both participants.');
    }
    const channel = {
        participants: channelParticipants,
        adjudicator: adjudicatorAddress,
        challenge: challengeDuration,
        nonce: channelNonce,
    };
    const channelId = (0, utils_1.getChannelId)(channel, deps.chainId);
    const stateToSign = {
        data: stateData,
        intent: types_1.StateIntent.INITIALIZE,
        allocations: [
            { destination: participants[0], token: tokenAddress, amount: initialAllocationAmounts[0] },
            { destination: participants[1], token: tokenAddress, amount: initialAllocationAmounts[1] },
        ],
        version: 0n,
        sigs: [],
    };
    const stateHash = (0, utils_1.getStateHash)(channelId, stateToSign);
    const accountSignature = await (0, utils_1.signState)(stateHash, deps.stateWalletClient.signMessage);
    const initialState = {
        ...stateToSign,
        sigs: [accountSignature],
    };
    return { channel, initialState, channelId };
}
async function _prepareAndSignChallengeState(deps, params) {
    const { channelId, candidateState, proofStates = [] } = params;
    const stateHash = (0, utils_1.getStateHash)(channelId, candidateState);
    const encoded = (0, viem_1.encodeAbiParameters)([
        { type: 'bytes32', name: 'stateHash' },
        { type: 'string', name: 'challenge' },
    ], [stateHash, 'challenge']);
    const challengeHash = (0, viem_1.keccak256)(encoded);
    const challengerSig = await (0, utils_1.signState)(challengeHash, deps.stateWalletClient.signMessage);
    return { channelId, candidateState, proofs: proofStates, challengerSig };
}
async function _prepareAndSignResizeState(deps, params) {
    const { resizeState, proofStates } = params;
    if (!resizeState.data) {
        throw new Errors.MissingParameterError('State data is required for closing the channel.');
    }
    const channelId = resizeState.channelId;
    const serverSignature = (0, utils_1.removeQuotesFromRS)(resizeState.serverSignature);
    const stateToSign = {
        data: resizeState.data,
        intent: resizeState.intent,
        allocations: resizeState.allocations,
        version: resizeState.version,
        sigs: [],
    };
    const stateHash = (0, utils_1.getStateHash)(channelId, stateToSign);
    const accountSignature = await (0, utils_1.signState)(stateHash, deps.stateWalletClient.signMessage);
    const resizeStateWithSigs = {
        ...stateToSign,
        sigs: [accountSignature, serverSignature],
    };
    let proofs = [...proofStates];
    return { resizeStateWithSigs, proofs, channelId };
}
async function _prepareAndSignFinalState(deps, params) {
    const { stateData, finalState } = params;
    if (!stateData) {
        throw new Errors.MissingParameterError('State data is required for closing the channel.');
    }
    const channelId = finalState.channelId;
    const serverSignature = (0, utils_1.removeQuotesFromRS)(finalState.serverSignature);
    const stateToSign = {
        data: stateData,
        intent: types_1.StateIntent.FINALIZE,
        allocations: finalState.allocations,
        version: finalState.version,
        sigs: [],
    };
    const stateHash = (0, utils_1.getStateHash)(channelId, stateToSign);
    const accountSignature = await (0, utils_1.signState)(stateHash, deps.stateWalletClient.signMessage);
    const finalStateWithSigs = {
        ...stateToSign,
        sigs: [accountSignature, serverSignature],
    };
    return { finalStateWithSigs, channelId };
}
