import { RPCResponse } from '../types';
export declare const parseAnyRPCResponse: (response: string) => RPCResponse;
export declare const rpcResponseParser: {
    authChallenge: (raw: string) => import("../types").AuthChallengeResponse;
    authVerify: (raw: string) => import("../types").AuthVerifyResponse;
    authRequest: (raw: string) => import("../types").AuthRequestResponse;
    error: (raw: string) => import("../types").ErrorResponse;
    getConfig: (raw: string) => import("../types").GetConfigResponse;
    getLedgerBalances: (raw: string) => import("../types").GetLedgerBalancesResponse;
    getLedgerEntries: (raw: string) => import("../types").GetLedgerEntriesResponse;
    getLedgerTransactions: (raw: string) => import("../types").GetLedgerTransactionsResponse;
    getUserTag: (raw: string) => import("../types").GetUserTagResponse;
    createAppSession: (raw: string) => import("../types").CreateAppSessionResponse;
    submitAppState: (raw: string) => import("../types").SubmitAppStateResponse;
    closeAppSession: (raw: string) => import("../types").CloseAppSessionResponse;
    getAppDefinition: (raw: string) => import("../types").GetAppDefinitionResponse;
    getAppSessions: (raw: string) => import("../types").GetAppSessionsResponse;
    resizeChannel: (raw: string) => import("../types").ResizeChannelResponse;
    closeChannel: (raw: string) => import("../types").CloseChannelResponse;
    getChannels: (raw: string) => import("../types").GetChannelsResponse;
    getRPCHistory: (raw: string) => import("../types").GetRPCHistoryResponse;
    getAssets: (raw: string) => import("../types").GetAssetsResponse;
    assets: (raw: string) => import("../types").AssetsResponse;
    message: (raw: string) => import("../types").MessageResponse;
    balanceUpdate: (raw: string) => import("../types").BalanceUpdateResponse;
    channelsUpdate: (raw: string) => import("../types").ChannelsUpdateResponse;
    channelUpdate: (raw: string) => import("../types").ChannelUpdateResponse;
    ping: (raw: string) => import("../types").PingResponse;
    pong: (raw: string) => import("../types").PongResponse;
    transfer: (raw: string) => import("../types").TransferResponse;
    transferNotification: (raw: string) => import("../types").TransferNotificationResponse;
};
